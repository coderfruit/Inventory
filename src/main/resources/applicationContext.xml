<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean class = "com.stee.inventory.utils.PropUtils">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations"> <!--   加载本地properties -->
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
		<!--<property name="remotes">-->
			<!--<list>-->
				<!--<value>http://localhost:9099/jdbc.properties</value>-->
			<!--</list>-->
		<!--</property>-->
	</bean>

	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url" value="jdbc:postgresql://192.168.0.230:5432/streetlamp"/>
		<property name="username" value="postgres"/>
		<property name="password" value="123456"/>
		
		<property name="maxActive" value="20" />
	    <property name="initialSize" value="1" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="testWhileIdle" value="false" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxOpenPreparedStatements" value="20" />
		<!--开启SQL监控功能-->
		<property name="filters" value="stat,wall,log4j2"></property>
		<property name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000"></property>
	</bean>
	
	<!-- 配置hibernate5的Session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!--  <prop key="hibernate.hbm2ddl.auto">${hbm2ddl.auto}</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.autoReconnect">true</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.stee.inventory.entity"></property>
	</bean>
	
	<!-- mysql数据库的相关配置 -->
	<!-- 配置Spring的JdbcTemplate 支持SQL语句 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="sjt" class="org.springframework.jdbc.core.simple.SimpleJdbcCall">
		<constructor-arg>
			<ref bean="dataSource"></ref>
		</constructor-arg>
	</bean>
	<bean id="jt" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg>
			<ref bean="dataSource"></ref>
		</constructor-arg>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 事务的传播特性：事务方法提供 包括事务类型、事务隔离级别、事务会滚定义等 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED"></tx:method>
			<tx:method name="add*" propagation="REQUIRED"></tx:method>
			<tx:method name="clear*" propagation="REQUIRED"></tx:method>
			<tx:method name="ack*" propagation="REQUIRED"></tx:method>
			<tx:method name="update*" propagation="REQUIRED"></tx:method>
			<tx:method name="delete*" propagation="REQUIRED"></tx:method>
			<tx:method name="save*" propagation="REQUIRED"></tx:method>
			<tx:method name="get*" read-only="true"></tx:method>
			<tx:method name="count*" read-only="true"></tx:method>
			<tx:method name="find*" read-only="true"></tx:method>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"></tx:method>
		</tx:attributes>
	</tx:advice>
	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
	<!-- 事务应用切面定义（哪些类的哪些方法要使用事务） -->
	<aop:config>
		<aop:pointcut id="txPonits"
			expression="execution(* com.stee.inventory.service.*..*(..))"></aop:pointcut>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPonits"></aop:advisor>
	</aop:config>	
	
	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

	<!-- 通过切面方式配置日志 -->
	<bean id="logInterceptor" class="com.stee.inventory.utils.LogInterceptor"></bean>
	<aop:config expose-proxy="true">
		<aop:aspect id="serviceLoggerInterceptor" ref="logInterceptor">
			<aop:pointcut id="pointcut"
				expression="execution(* com.stee.inventory.controller.OcmController.*.*(..))" />
			<aop:pointcut id="exPointcut"
				expression="execution(* com.stee.stl..*.*(..))" />
			<aop:before method="doBefore" pointcut-ref="pointcut"/>
			<aop:after method="doAfter" pointcut-ref="pointcut"/>
			<aop:after-throwing method="throwException" throwing="throwable" pointcut-ref="exPointcut"/>
			<aop:after-returning method="saveLog" pointcut-ref="pointcut"/>
		</aop:aspect>
	</aop:config>
	
	<aop:aspectj-autoproxy/>
	<context:annotation-config/>
	<context:component-scan base-package="com.stee">
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<bean id = "restTemplate" class="org.springframework.web.client.RestTemplate"/>
</beans>
